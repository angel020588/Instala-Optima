ndex.js (o app.js) – archivo principal
require("dotenv").config();
const express = require("express");
const cors = require("cors");
const path = require("path");
const app = express();
const sequelize = require("./config/db");

// ✅ Middlewares necesarios
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true })); // <- NECESARIO para datos tipo x-www-form-urlencoded

// ✅ Servir frontend (si usas HTML)
app.use(express.static(path.join(__dirname, "public")));

// ✅ Evitar caché (opcional)
app.use((req, res, next) => {
  res.set("Cache-Control", "no-cache, no-store, must-revalidate");
  res.set("Pragma", "no-cache");
  res.set("Expires", "0");
  next();
});

// ✅ Rutas API
app.use("/api/esp32", require("./routes/esp32"));
app.use("/api/nivel", require("./routes/nivel"));
app.use("/api/cotizaciones", require("./routes/cotizaciones"));

// ✅ Ruta IA
app.post("/api/chat", async (req, res) => {
  const { mensaje, contexto } = req.body;

  const response = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      model: "gpt-4",
      messages: [
        { role: "system", content: contexto },
        { role: "user", content: mensaje }
      ],
    })
  });

  const data = await response.json();
  res.json({ respuesta: data.choices?.[0]?.message?.content || "Error al generar respuesta." });
});

// ✅ Conectar DB y lanzar servidor
sequelize
  .sync({ alter: true })
  .then(() => {
    console.log("✅ UltraBase conectada");
    app.listen(5000, "0.0.0.0", () => {
      console.log("🚀 Servidor corriendo en puerto 5000");
    });
  })
  .catch((err) => {
    console.error("❌ Error en UltraBase:", err);
  });

📄 routes/esp32.js – ruta para el ESP32
const express = require("express");
const router = express.Router();

// ✅ Ruta GET para pruebas desde navegador
router.get("/", (req, res) => {
  const nivel = parseInt(req.query.nivel);
  if (isNaN(nivel)) return res.status(400).send("nivel inválido");

  console.log("📡 Nivel GET recibido:", nivel + "%");

  if (nivel <= 20) return res.send("encender");
  if (nivel >= 95) return res.send("apagar");
  return res.send("esperar");
});

// ✅ Ruta POST para peticiones reales desde ESP32
router.post("/", (req, res) => {
  const nivel = parseInt(req.body.nivel);
  const dispositivo = req.body.dispositivo || "ESP32";

  if (isNaN(nivel)) return res.status(400).json({ error: "Nivel inválido" });

  console.log("📡 Nivel POST recibido:", nivel + "%", "Dispositivo:", dispositivo);

  let comando = "esperar";
  if (nivel <= 20) comando = "encender";
  else if (nivel >= 95) comando = "apagar";

  res.json({
    comando,
    nivel,
    mensaje: `Nivel ${nivel}% - ${comando} bomba`
  });
});

module.exports = router;

🧪 Pruebas
✅ Desde navegador (GET)
https://instala-optima-ecotisat.replit.app/api/esp32?nivel=25


Deberías ver:

esperar

✅ Desde consola (POST con curl)
curl -X POST https://instala-optima-ecotisat.replit.app/api/esp32 \
  -H "Content-Type: application/x-www-form-urlencoded" \
  -d "nivel=50"


Deberías ver:

{
  "comando": "esperar",
  "nivel": 50,
  "mensaje": "Nivel 50% - esperar bomba"
}

✅ Desde ESP32 (http.POST())

Ya puedes usar esta versión:

HTTPClient http;
http.begin("https://instala-optima-ecotisat.replit.app/api/esp32");
http.addHeader("Content-Type", "application/x-www-form-urlencoded");

String postData = "nivel=" + String(porcentaje);
int httpResponseCode = http.POST(postData);

if (httpResponseCode > 0) {
  String respuesta = http.getString();
  Serial.println("Servidor respondió: " + respuesta);

  if (respuesta.indexOf("encender") >= 0) {
    digitalWrite(relayPin, LOW);
  } else if (respuesta.indexOf("apagar") >= 0) {
    digitalWrite(relayPin, HIGH);
  }
} else {
  Serial.print("Error HTTP: ");
  Serial.println(httpResponseCode);
}
http.end();

🟢 Resultado final

Con estos ajustes, tu ESP32 puede hacer POST correctamente a tu backend en Replit y recibir instrucciones como:

encender

apagar

esperar